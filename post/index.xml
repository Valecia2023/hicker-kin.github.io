<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on hicker-kin blog</title>
    <link>https://hicker-kin.github.io/post/</link>
    <description>Recent content in Posts on hicker-kin blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hicker-kin.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>defer VS return</title>
      <link>https://hicker-kin.github.io/post/defer/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hicker-kin.github.io/post/defer/</guid>
      <description>defer和return到底谁先执行：
package test import ( &amp;#34;fmt&amp;#34; &amp;#34;testing&amp;#34; ) /** 如果函数的返回值是无名的，那么go语言会在执行return的时候先创建一个临时变量来保存return值， 然后再执行defer函数，最后返回临时变量。 如果函数的返回值是有名的，那么go语言会在执行return的时候先把返回值赋给有名变量，然后再执行defer函数， 最后返回有名变量。这样defer函数就可以修改有名变量的值。 */ func TestDefer(t *testing.T) { a := 1 t.Log(fn1(&amp;amp;a)) b := 2 t.Log(fn2(&amp;amp;b)) } func fn1(i *int) int { defer func() { *i += 3 fmt.Println(&amp;#34;run defer after return when back variable is anonymous&amp;#34;) }() return *i } func fn2(i *int) (resp int) { defer func() { resp = *i + 3 fmt.Println(&amp;#34;run defer before return when back variable is anonymous&amp;#34;) }() return resp } // 测试结果 === RUN TestDefer run defer after return when back variable is anonymous defer_test.</description>
    </item>
    
    <item>
      <title>队列实现</title>
      <link>https://hicker-kin.github.io/post/queue/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hicker-kin.github.io/post/queue/</guid>
      <description>本文主要实现自定义的几种队列，代码实现如下：
使用golang的list 使用list自带的PushBack(),PushFront()等特性实现enqueue
package main import ( &amp;#34;container/list&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;testing&amp;#34; ) func TestList(_ *testing.T) { l := list.New() l.PushFront(&amp;#34;10&amp;#34;) l.PushFront(&amp;#34;20&amp;#34;) l.PushBack(&amp;#34;40&amp;#34;) l.PushBack(&amp;#34;50&amp;#34;) // 20 10 40 50 fmt.Println(&amp;#34;len -- &amp;#34;, l.Len()) front := l.Front() // 20 fmt.Println(front.Value) for e := l.Front(); e != nil; e = e.Next() { fmt.Printf(&amp;#34;%T %v \t&amp;#34;, e.Value, e.Value) // string 20 string 10 string 40 string 50 } } func TestList2(_ *testing.T) { customQueue := &amp;amp;customQueue{ queue: list.</description>
    </item>
    
    <item>
      <title>Gin Http Proxy</title>
      <link>https://hicker-kin.github.io/post/gin-proxy/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hicker-kin.github.io/post/gin-proxy/</guid>
      <description>&lt;p&gt;本文是使用httputils库做的反向代理，代码实现如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Http Proxy</title>
      <link>https://hicker-kin.github.io/post/http-proxy/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hicker-kin.github.io/post/http-proxy/</guid>
      <description>本文是使用httputils库做的反向代理，代码实现如下:
用法:
1、本地运行main 2、访问http://127.0.0.1:8080即可打开百度
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/http/httputil&amp;#34; &amp;#34;net/url&amp;#34; ) func ReverseProxyHandler(w http.ResponseWriter, r *http.Request) { fmt.Println(&amp;#34;receive a request from:&amp;#34;, r.RemoteAddr, r.Header) remote, err := url.Parse(&amp;#34;https://www.baidu.com&amp;#34;) if err != nil { panic(err) } reverseProxy := httputil.NewSingleHostReverseProxy(remote) director := func(req *http.Request) { req.URL.Scheme = remote.Scheme req.URL.Host = remote.Host req.Host = remote.Host } reverseProxy.Director = director reverseProxy.ServeHTTP(w, r) } func main() { fmt.Printf(&amp;#34;Starting server at port 8080\n&amp;#34;) if err := http.</description>
    </item>
    
    <item>
      <title>Welcome to my blog</title>
      <link>https://hicker-kin.github.io/post/welcome/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hicker-kin.github.io/post/welcome/</guid>
      <description></description>
    </item>
    
    <item>
      <title>日本語テスト</title>
      <link>https://hicker-kin.github.io/post/japanese-test/</link>
      <pubDate>Wed, 02 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hicker-kin.github.io/post/japanese-test/</guid>
      <description>&lt;p&gt;This is a Japanese test post to show you how japanese is displayed.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
