<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang queue on hicker-kin blog</title>
    <link>https://hicker-kin.github.io/tags/golang-queue/</link>
    <description>Recent content in golang queue on hicker-kin blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hicker-kin.github.io/tags/golang-queue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>队列实现</title>
      <link>https://hicker-kin.github.io/post/queue/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hicker-kin.github.io/post/queue/</guid>
      <description>本文主要实现自定义的几种队列，代码实现如下：
使用golang的list 使用list自带的PushBack(),PushFront()等特性实现enqueue
package main import ( &amp;#34;container/list&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;testing&amp;#34; ) func TestList(_ *testing.T) { l := list.New() l.PushFront(&amp;#34;10&amp;#34;) l.PushFront(&amp;#34;20&amp;#34;) l.PushBack(&amp;#34;40&amp;#34;) l.PushBack(&amp;#34;50&amp;#34;) // 20 10 40 50 fmt.Println(&amp;#34;len -- &amp;#34;, l.Len()) front := l.Front() // 20 fmt.Println(front.Value) for e := l.Front(); e != nil; e = e.Next() { fmt.Printf(&amp;#34;%T %v \t&amp;#34;, e.Value, e.Value) // string 20 string 10 string 40 string 50 } } func TestList2(_ *testing.T) { customQueue := &amp;amp;customQueue{ queue: list.</description>
    </item>
    
  </channel>
</rss>
